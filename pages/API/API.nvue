<template>
    <div>
        <tabs @change="changeTab" :index="tabIndex">
            <tab-bar>
                <div class="tab-bar-item" v-for="(tabBar, t) in tabBars" :key="t" :ref="tabBar.id + t">
                    <text class="tab-bar-title" :class="[tabIndex === t ? 'active' : '']">{{tabBar.name}}</text>
                </div>
            </tab-bar>
            <tab-content>
                <list class="list" @loadmore="loadMore(index1)" loadmoreoffset="10" v-for="(tab,index1) in newsitems"
                    :key="index1">
                    <refresh class="refresh" @refresh="onrefresh" @pullingdown="onpullingdown" :display="refreshing ? 'show' : 'hide'">
                        <text class="refresh-text">{{refreshText}}</text>
                    </refresh>
                    <cell v-for="(newsitem,index2) in tab.data" :key="index2">
                        <media-list :data="newsitem" @close="close(index1,index2)" @click="goDetail(newsitem)"></media-list>
                    </cell>
                    <cell class="loadmore">
                        <text class="loadmore-text">{{tab.loadingText}}</text>
                    </cell>
                </list>
            </tab-content>
        </tabs>
    </div>
</template>

<script>
    import tabContent from '../../components/tab-nvue/tabContent.nvue'
    import tabBar from '../../components/tab-nvue/tabBar.nvue'
    import tabs from '../../components/tab-nvue/tabs.nvue'
    import mediaList from '../../components/tab-nvue/mediaList.nvue'
    const dom = weex.requireModule('dom')
    export default {
        components: {
            tabContent,
            tabBar,
            tabs,
            mediaList
        },
        data() {
            return {
                refreshing: false,
                refreshText: "下拉可以刷新",
                tabIndex: 0,
                newsitems: [],
                data0: {
                    "datetime": "40分钟前",
                    "article_type": 0,
                    "title": "uni-app行业峰会频频亮相，开发者反响热烈!",
                    "source": "DCloud",
                    "comment_count": 639
                },
                data1: {
                    "datetime": "一天前",
                    "article_type": 1,
                    "title": "DCloud完成B2轮融资，uni-app震撼发布!",
                    "image_url": "https://img-cdn-qiniu.dcloud.net.cn/uniapp/images/shuijiao.jpg?imageView2/3/w/200/h/100/q/90",
                    "source": "DCloud",
                    "comment_count": 11395
                },
                data2: {
                    "datetime": "一天前",
                    "article_type": 2,
                    "title": "中国技术界小奇迹：HBuilder开发者突破200万",
                    "image_url": "https://img-cdn-qiniu.dcloud.net.cn/uniapp/images/muwu.jpg?imageView2/3/w/200/h/100/q/90",
                    "source": "DCloud",
                    "comment_count": 11395
                },
                data4: {
                    "datetime": "2小时前",
                    "article_type": 4,
                    "title": "uni-app 支持原生小程序自定义组件，更开放、更自由",
                    "image_url": "https://img-cdn-qiniu.dcloud.net.cn/uniapp/images/cbd.jpg?imageView2/3/w/200/h/100/q/90",
                    "source": "DCloud",
                    "comment_count": 69
                },
                data3: {
                    "article_type": 3,
                    "image_list": [{
                        "url": "https://img-cdn-qiniu.dcloud.net.cn/uniapp/images/cbd.jpg?imageView2/3/w/200/h/100/q/90",
                        "width": 563,
                        "height": 316
                    }, {
                        "url": "https://img-cdn-qiniu.dcloud.net.cn/uniapp/images/muwu.jpg?imageView2/3/w/200/h/100/q/90",
                        "width": 641,
                        "height": 360
                    }, {
                        "url": "https://img-cdn-qiniu.dcloud.net.cn/uniapp/images/shuijiao.jpg?imageView2/3/w/200/h/100/q/90",
                        "width": 640,
                        "height": 360
                    }],
                    "datetime": "5分钟前",
                    "title": "uni-app 支持使用 npm 安装第三方包，生态更趋丰富",
                    "source": "DCloud",
                    "comment_count": 11
                },
                tabBars: [{
                    name: '关注',
                    id: 'guanzhu'
                }, {
                    name: '推荐',
                    id: 'tuijian'
                }, {
                    name: '体育',
                    id: 'tiyu'
                }, {
                    name: '热点',
                    id: 'redian'
                }, {
                    name: '财经',
                    id: 'caijing'
                }]
            }
        },
        created() {
            setTimeout(() => {
				// this.randomfn()是一个带有返回值的函数，将最新值赋给this.newsitems
                this.newsitems = this.randomfn();
            }, 150)
        },
        methods: {
            goDetail(e) {
                uni.navigateTo({
                    url: '/pages/mine/collect/detail/detail?data=' + e.title
                })
            },
            close(index1, index2) {
            	uni.showModal({
            		content: '是否删除本条信息？',
            		success: (res) => {
            			if (res.confirm) {
            				this.newsitems[index1].data.splice(index2, 1);
            			}
            		}
            	})
            },
            loadMore(e) {
				console.log("加载：" + e)
            	setTimeout(() => {
            		this.addData(e);
            	}, 1000);
            },
            addData(e) {
				console.log("数据1：" + JSON.stringify(e))
            	if (this.newsitems[e].data.length > 30) {
            		this.newsitems[e].loadingText = '没有更多了';
            		return;
            	}
            	for (let i = 1; i <= 10; i++) {
            		this.newsitems[e].data.push(this['data' + Math.floor(Math.random() * 5)]);
					console.log("数据：" + this[data0])
            	}
            },
			//async 表示函数changeTab是异步的，该函数会返回一个promise对象，可以通过then方法添加回调函数：changeTab.then(){}
            async changeTab(e) { // async - await 是promise的语法糖,async-await 是建立在 promise机制之上的，并不能取代其地位。
                this.tabIndex = e.index;
				// 了解到的$refs的写法是：this.$refs.XXX ,但是当对象是一个变量时：使用[]来拼接，如<form  ref="formName"></form>,
				// 可以写成this.$refs.formName 或者 this.$refs['formName'],   为变量时：var a = 'wt'   ----  写成只能写成this.$refs[a]
				const el = this.$refs[this.tabBars[e.index].id + e.index][0]
				console.log(el);
                let elSize = await this.getElSize(el); // await可以理解为async-await的简写，await必须现在函数内部
				console.log("size:" + elSize)
                if (elSize.left + elSize.width > 750) {
                    let index = e.index - 4;
                    let newEl = this.$refs[this.tabBars[index].id + index][0]
                    dom.scrollToElement(newEl, {});
                    return;
                }
                if (elSize.left < 0) {
                    dom.scrollToElement(el, {});
                }
            },
            getElSize(el) { //得到元素的size
                return new Promise((res, rej) => {
                    const result = dom.getComponentRect(el, option => {
                        res(option.size);
                    })
                })
            },
            randomfn() {
                let ary = [];
                for (let i = 0, length = this.tabBars.length; i < length; i++) {
                    let aryItem = {
                        loadingText: "加载更多...",
                        data: []
                    };
                    for (let j = 1; j <= 10; j++) { //  Math.floor：向下取整 Math.random：0到1的随机数
                        aryItem.data.push(this['data' + Math.floor(Math.random() * 5)]);
                    }
					console.log(aryItem.data);
                    ary.push(aryItem);
                }
                return ary;
            },
            onrefresh(event) {
            	uni.showToast({
            		title: "refresh",
            		icon: "none"
            	});
            	this.refreshText = "正在刷新...";
            	this.refreshing = true;
            	setTimeout(() => {
            		console.log("刷新结束")
            		this.refreshing = false
            	}, 2000)
            },
            onpullingdown(event) {
            	if (this.refreshing) {
            		return;
            	}
            	if (Math.abs(event.pullingDistance) > Math.abs(event.viewHeight)) {
            		this.refreshText = "释放立即刷新";
            	} else {
            		this.refreshText = "下拉可以刷新";
            	}
            }
        }
    }
</script>

<style>
    .tab-bar-item {
        width: 150px;
        height: 100px;
        flex-direction: column;
        align-items: center;
        justify-content: center;
    }

    .tab-bar-title {
        height: 100px;
        line-height: 100px;
        font-size: 30px;
        color: #555;
    }

    .active {
        color: #007AFF;
    }

    .loadmore {
        height: 70px;
        width: 750px;
        flex-direction: column;
        justify-content: center;
    }

    .loadmore-text {
        font-size: 30px;
        text-align: center;
        color: #999999;
    }

    .refresh {
        width: 750px;
        height: 70px;
        flex-direction: row;
        align-items: center;
        justify-content: center;
    }

    .refresh-text {
        text-align: center;
        font-size: 28px;
        color: #999999;
    }
</style>
